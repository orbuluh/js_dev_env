#!/bin/bash

function init_tool() {
  local tool_name="$1"
  local init_command=""
  local alias_command=""

  shift
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --init)
      init_command="$2"
      shift
      ;;
    --alias)
      alias_command="$2"
      shift
      ;;
    *)
      echo "Unknown option: $1"
      return 1
      ;;
    esac
    shift
  done

  if command -v "$tool_name" &>/dev/null; then
    if [ -n "$init_command" ]; then
      eval "$init_command"
    fi
    if [ -n "$alias_command" ]; then
      eval "$alias_command"
    fi
  else
    echo "'$tool_name' not found."
  fi
}

# Usage examples without empty placeholders
init_tool "eza" --alias "alias ls='eza'; alias ll='ls -l'"
init_tool "zoxide" --init "$(zoxide init bash)"
init_tool "fzf" --init "$(fzf --bash)"
init_tool "bat" --alias "alias cat='bat'"

# more complicated init that doesn't fit init_tools ----------------------

function init_better_prompt() {
  # https://github.com/starship/starship/issues/5816
  # currently double init will infinite loop and crash
  if [[ "$PROMPT_COMMAND" != *__vsc_prompt_cmd_original* ]]; then
    # for starship
    # echo "PROMPT_COMMAND=$PROMPT_COMMAND"
    eval "$(starship init bash)"
  fi
}

function init_python_uv() {
  # Check if `$HOME/.cargo/env` exists
  if [ ! -f "$HOME/.cargo/env" ]; then
    echo "Warning: $HOME/.cargo/env does not exist."
  else
    source "$HOME/.cargo/env"
  fi

  # Check if `uv` is available
  if ! command -v uv &>/dev/null; then
    echo "Warning: 'uv' command not found."

    # Prompt for installation
    read -p "Would you like to install uv? (y/N): " response
    case "$response" in
    [yY][eE][sS] | [yY])
      echo "Installing uv..."
      curl -LsSf https://astral.sh/uv/install.sh | sh
      ;;
    *)
      echo "Installation aborted. uv not found and not sourced."
      return 1
      ;;
    esac
  fi
}

init_python_uv
init_better_prompt
