#!/bin/bash

# Archive a local branch
#
# Usage: ga <branch name>
#
# ga will first check if the branch exists, then check if the archive tag already
# exists. If the tag already exists, it will exit with an error message. If the tag
# does not exist, it will create the tag, switch back to the master branch (or
# your default branch), and delete the local branch (optional). Finally, it will
# print a success message.
function ga() {
  local branch_name="$1"
  local tag_name="archive/$branch_name"

  # Check if the branch exists
  if ! git show-ref --verify --quiet "refs/heads/$branch_name"; then
    echo "Branch '$branch_name' does not exist."
    return 1
  fi

  # Check if the archive tag already exists
  if git show-ref --tags --quiet "refs/tags/$tag_name"; then
    echo "Tag '$tag_name' already exists. To archive, manually delete the tag using 'git tag -d $tag_name'."
    return 1
  fi

  # Check out the branch
  git checkout "$branch_name" || return 1

  # Create an archive tag
  git tag "$tag_name" || return 1

  # Switch back to the master branch (or your default branch)
  git checkout master || return 1

  # Delete the local branch (optional)
  git branch -d "$branch_name" || return 1

  echo "Branch '$branch_name' archived as '$tag_name'."
}

# Unarchive a Tag into a New Branch - gua == git un-archive
#
# Check if the tag exists and create a new branch from the tag.
#
# @param $1 The name of the tag to unarchive.
function gua() {
  local tag_name="$1"
  local new_branch_name="${tag_name#archive/}"

  # Check if the tag exists
  if ! git show-ref --tags --quiet "refs/tags/$tag_name"; then
    echo "Tag '$tag_name' does not exist."
    return 1
  fi

  # Create a new branch from the tag
  git checkout -b "$new_branch_name" "$tag_name" || return 1

  echo "Branch '$new_branch_name' created from tag '$tag_name'."
}

# Switches to the master or main branch.
#
# Checks if the master branch exists. If it does, it is checked out.
# Otherwise, it checks out the main branch.
function gcm() {
  if git show-ref --verify --quiet refs/heads/master; then
    git checkout master
  else
    git checkout main
  fi
}

# Switches to a specified git branch.
#
# Checks if the current directory is a git repository, if a branch name was
# provided, and if the branch exists. If any of these checks fail, an error
# message is printed and the function returns 1.
#
# @param $1 The name of the branch to switch to.
function gcb() {
  # Check if the current directory is a git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not inside a git repository."
    return 1
  fi

  # Check if a branch name was provided
  if [ -z "$1" ]; then
    echo "Error: No branch name provided."
    return 1
  fi

  # Check if the provided branch exists
  if ! git show-ref --verify --quiet refs/heads/"$1"; then
    echo "Error: Branch '$1' does not exist."
    return 1
  fi

  # Switch to the branch
  git checkout "$1"
}

# Renames a local and remote branch. grb == git rename branch
#
# @param $1 The new name of the branch.
# @param $2 The old name of the branch.
#
# Checks if the old branch exists, renames the local branch, pushes the new
# branch to remote and deletes the old branch, and then sets the upstream for
# the new branch. If the old branch does not exist, an error message is printed
# and the function exits with code 1.
grb() {
  if [ $# -ne 2 ]; then
    echo "Usage: grb <old_branch_name> <new_branch_name>"
    return 1
  fi

  old_branch_name="$1"
  new_branch_name="$2"

  # Check if the old branch exists
  if ! git show-ref --verify --quiet refs/heads/"$old_branch_name"; then
    echo "Error: Branch '$old_branch_name' does not exist."
    return 1
  fi

  # Store the name of the current branch
  current_branch=$(git rev-parse --abbrev-ref HEAD)

  # Checkout to the old branch
  git checkout "$old_branch_name" || exit 1

  # Rename the old branch to the new branch
  git branch -m "$new_branch_name"

  # Push the new branch to the remote and delete the old branch on remote
  git push origin :"$old_branch_name" "$new_branch_name"

  # Set the upstream for the new branch
  git push origin -u "$new_branch_name"

  # Switch back to the original branch
  git checkout "$current_branch" || exit 1

  echo "Successfully renamed branch '$old_branch_name' to '$new_branch_name' and switched back to '$current_branch'."
}

#[g]it [d]iff [l]ist [l]ines
gdll() {
  # Check if ripgrep (rg) is available
  if ! command -v rg &>/dev/null; then
    echo "ripgrep (rg) is not installed. Please install it and try again."
    return 1
  fi

  # Get the diff and process it
  git diff -U0 | while read -r line; do
    if [[ $line =~ ^diff\ --git ]]; then
      # Extract the filename using rg
      file=$(echo "$line" | rg -o 'b/.*' | sed 's|b/||')
    elif [[ $line =~ ^@@ ]]; then
      # Extract the line number after "+" using rg
      line_number=$(echo "$line" | rg -o '\+[0-9]+' | head -1 | sed 's/+//')
      echo "${file}:${line_number}"
    fi
  done
}

# Function to get code changes in the format file:line_number
gdll() {
  # Check if ripgrep (rg) is available
  if ! command -v rg &>/dev/null; then
    echo "ripgrep (rg) is not installed. Please install it and try again."
    return 1
  fi

  # Get code changes in format file:line_number
  git diff -U0 | while read -r line; do
    if [[ $line =~ ^diff\ --git ]]; then
      # Extract the filename
      file=$(echo "$line" | rg -o 'b/.*' | sed 's|b/||')
    elif [[ $line =~ ^@@ ]]; then
      # Extract the starting line number of the change block
      line_number=$(echo "$line" | rg -o '\+[0-9]+' | head -1 | sed 's/+//')
      echo "${file}:${line_number}"
    fi
  done
}

alias gbc='git checkout -b' #git branch create
alias gsb='git switch -'

alias gs='git status'

#alias gl='git log --color=always --abbrev-commit'
#alias gt='git log --graph --pretty=oneline --abbrev-commit'

alias gd='git diff'
alias gdl='git diff --name-only --relative'

#alias gb='git branch -vv'

alias gp='git push'
