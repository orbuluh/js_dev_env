#---------------------------git-prompt related----------------------------------

if [ ! -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
  # https://github.com/magicmonty/bash-git-prompt
  git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1
fi

# GIT_PROMPT_ONLY_IN_REPO=1
# GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
# GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules
# GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments
# GIT_PROMPT_VIRTUAL_ENV_AFTER_PROMPT=1 # uncomment to place virtual environment infos between prompt and git status (instead of left to the prompt)

# GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
# GIT_PROMPT_SHOW_UNTRACKED_FILES=normal # can be no, normal or all; determines counting of untracked files

# GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files

# GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh # uncomment to support Git older than 1.7.10

# GIT_PROMPT_START=...    # uncomment for custom prompt start sequence
# GIT_PROMPT_END=...      # uncomment for custom prompt end sequence

# as last entry source the gitprompt script
# GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
# GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh
# GIT_PROMPT_THEME=Solarized # use theme optimized for solarized color scheme
# run command `git_prompt_list_themes` will show all the available themes

GIT_PROMPT_THEME=Single_line_Ubuntu
source $HOME/.bash-git-prompt/gitprompt.sh

#-----------------------------------------------------------------------------

# Function to Archive a Local Branch - ga == git archive
function ga() {
  local branch_name="$1"
  local tag_name="archive/$branch_name"

  # Check if the branch exists
  if ! git show-ref --verify --quiet "refs/heads/$branch_name"; then
    echo "Branch '$branch_name' does not exist."
    return 1
  fi

  # Check if the archive tag already exists
  if git show-ref --tags --quiet "refs/tags/$tag_name"; then
    echo "Tag '$tag_name' already exists. To archive, manually delete the tag using 'git tag -d $tag_name'."
    return 1
  fi

  # Check out the branch
  git checkout "$branch_name" || return 1

  # Create an archive tag
  git tag "$tag_name" || return 1

  # Switch back to the master branch (or your default branch)
  git checkout master || return 1

  # Delete the local branch (optional)
  git branch -d "$branch_name" || return 1

  echo "Branch '$branch_name' archived as '$tag_name'."
}

# Function to Unarchive a Tag into a New Branch - gua == git un-archive
function gua() {
  local tag_name="$1"
  local new_branch_name="${tag_name#archive/}"

  # Check if the tag exists
  if ! git show-ref --tags --quiet "refs/tags/$tag_name"; then
    echo "Tag '$tag_name' does not exist."
    return 1
  fi

  # Create a new branch from the tag
  git checkout -b "$new_branch_name" "$tag_name" || return 1

  echo "Branch '$new_branch_name' created from tag '$tag_name'."
}

function gcm() {
  if git show-ref --verify --quiet refs/heads/main; then
    git checkout main
    exit 0
  fi

  # Check if master branch exists
  if git show-ref --verify --quiet refs/heads/master; then
    git checkout master
  fi

  echo "Neither main or master branch exists ... do nothing"
}

#-----------------------------------------------------------------------------

alias gs='git status'
alias gl='git log --abbrev-commit'
alias gd='git diff'
alias gdl='git diff --name-only --relative'
alias gb='git branch -vv'
alias gp='git push'
alias gcb='git checkout -b'
alias gt='git log --graph --pretty=oneline --abbrev-commit'
