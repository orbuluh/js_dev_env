#!/bin/bash

## Color code
export RESET='\e[0m'
export WHITE='\e[1;37m'
export BLACK='\e[0;30m'
export BLUE='\e[0;34m'
export LIGHT_BLUE='\e[1;34m'
export GREEN='\e[0;32m'
export LIGHT_GREEN='\e[1;32m'
export CYAN='\e[0;36m'
export LIGHT_CYAN='\e[1;36m'
export RED='\e[0;31m'
export LIGHT_RED='\e[1;31m'
export PURPLE='\e[0;35m'
export LIGHT_PURPLE='\e[1;35m'
export BROWN='\e[0;33m'
export YELLOW='\e[1;33m'
export GRAY='\e[0;30m'
export LIGHT_GRAY='\e[0;37m'

function showcolor {
  for i in {0..255}; do
    printf "\x1b[38;5;${i}mcolour${i}\n"
  done
}

# ------------------------------------------------------------------------

function check_envs() {
  local env_name="$1"

  # Check if the environment variable is defined
  if [[ -z "${!env_name}" ]]; then
    echo -e "${RED}Error: ${env_name} is not defined.${RESET}"
    return 1
  fi
}

function check_path_envs() {
  local env_name="$1"

  # Check if the environment variable is defined
  if ! check_envs "$env_name"; then
    return 1
  fi

  # Dereference the variable to get its value (the path)
  local path_value="${!env_name}"

  # Check if the path exists
  if [[ ! -e "$path_value" ]]; then
    echo -e "${RED}Error: Path ${path_value} (from ${env_name}) does not exist.${RESET}"
    return 1
  fi
}

function check_variable() {
  local var_name="$1"
  local var_value="${!var_name}"

  if [ -n "${!var_name+x}" ] && [ -n "$var_value" ]; then
    return 0
  else
    return 1
  fi
}

function bb() {
  # Define project root directory
  if [ -d ".git" ]; then
    project_root=$(git rev-parse --show-toplevel)
  else
    project_root=$(pwd)
    echo "Assuming current directory '$project_root' as project root."
  fi

  # Define source and build directories
  source_dir="$project_root"
  build_dir="$project_root/build"

  # Check if build directory exists
  if [ ! -d "$build_dir" ]; then
    # Create build directory if it doesn't exist
    mkdir -p "$build_dir"
  fi

  # Change to build directory
  cd "$build_dir" || return 1

  # Run CMake configuration
  cmake -G Ninja "$source_dir"

  # Build the project
  cmake --build .

  # Return to original directory
  cd - >/dev/null
}

function rbb() {
  if [ "$(basename "$(pwd)")" = "build" ]; then
    cd .. || return 1
  else
    echo "Not in the 'build' directory. Assume on project root."
  fi

  if [ -d build ]; then
    rm -rf build/*
  fi

  bb
}

function export_key_if_exists() {
  local var_name="$1"  # The variable name to export
  local file_path="$2" # The path to the file

  if [ -f "$file_path" ]; then
    eval "$var_name=\$(cat \"$file_path\")"
    export "$var_name"
  fi
}

function histnots() { # history wihtout timestamp
  # Get the number of commands to display, default to 10 if not provided
  local num_commands=${1:-10}

  # Display the latest history commands without line numbers
  history | tail -n "$num_commands" | awk '{$1=""; print substr($0,2)}'
}
